import React, { useState, useEffect, useRef } from 'react';
import Swal from 'sweetalert2';
import withReactContent from 'sweetalert2-react-content';
import girlchat from './images/ayesha.png';
import Image from 'next/image';
import SendIcon from '@mui/icons-material/Send';
import axios from 'axios';
import { Modal, Button } from 'react-bootstrap';
import Dialog from '@mui/material/Dialog';
import ListItemText from '@mui/material/ListItemText';
import ListItemButton from '@mui/material/ListItemButton';
import List from '@mui/material/List';
import Divider from '@mui/material/Divider';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import CloseIcon from '@mui/icons-material/Close';
import Slide from '@mui/material/Slide';

const MySwal = withReactContent(Swal);

const Transition = React.forwardRef(function Transition(
  props,
  ref,
) {
  return <Slide direction="up" ref={ref} {...props} />;
});

const ChatAppAlert = () => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [sendingMessage, setSendingMessage] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [email, setEmail] = useState('');
  const [welcomeMessageShown, setWelcomeMessageShown] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const [isMobile, setIsMobile] = useState(false);
  const [open, setOpen] = useState(false);
  const [dialogContent, setDialogContent] = useState({ message: '', imageUrl: '', link: '' });

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768); // Adjust the breakpoint as needed
    };

    window.addEventListener('resize', handleResize);
    handleResize(); // Call it once on mount

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    const fetchSessionId = async () => {
      const storedSessionId = localStorage.getItem('session_id');
      if (storedSessionId) {
        setSessionId(storedSessionId);
        return;
      }
      try {
        const result = await MySwal.fire({
          title: 'Welcome To CBD Bank',
          html: '<input type="email" id="email" class="swal2-input" placeholder="Enter your email" required>',
          confirmButtonText: 'Continue',
          allowOutsideClick: false,
          allowEscapeKey: false,
          customClass: {
            container: 'custom-swal', // Custom class for the container
            title: 'custom-title', // Optional: Custom class for title
            input: 'custom-input', // Optional: Custom class for input
            confirmButton: 'custom-confirm', // Optional: Custom class for confirm button
          },
          preConfirm: () => {
            const email = Swal.getPopup().querySelector('#email').value;
            if (!email || !email.includes('@') || !email.includes('.')) {
              Swal.showValidationMessage('Please enter a valid email address');
              return false;
            }
            setEmail(email);
            return email;
          }
        });

        if (result.isConfirmed) {
          const email = result.value;
          const response = await axios.post('https://chat.indenta.ai/init-session/', {
            // const response = await axios.post('http://chat.indenta.ai:8000/init-session/', {
            email
          }, {
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            }
          });

          if (response.status === 200) {
            const data = response.data;
            const sessionId = data.session_id;
            setSessionId(sessionId);
            localStorage.setItem('session_id', sessionId);
          } else {
            throw new Error('Failed to fetch session ID');
          }
        }
      } catch (error) {
        console.error('Error initializing session:', error.message);
        Swal.fire('Error', 'Failed to initialize session. Please try again later.', 'error');
      }
    };

    // Call fetchSessionId function when component mounts
    fetchSessionId();
  }, []);

  // Function to handle sending messages
  const handleSend = async () => {
    if (inputValue.trim()) {
      const newMessages = [...messages, { sender: 'user', text: inputValue }];
      setMessages(newMessages);
      setInputValue('');
      setSendingMessage(true);

      try {
        const sessionId = localStorage.getItem('session_id'); // Retrieve session ID from localStorage
        console.log('bot session', sessionId);

        const response = await axios.post('https://chat.indenta.ai/message/', {
          // const response = await axios.post('http://chat.indenta.ai:8000/message/', {
          message: inputValue,
          // url: 'http://chat.indenta.ai:8000/message/',
          session_id: sessionId,
        }, {
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          }
        });

        if (response.status === 200) {
          const data = response.data;
          console.log('data--->', data)
          let botMessage = data.response;
          // botMessage = botMessage.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
          // botMessage = botMessage.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
          // botMessage = botMessage.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\n/g, '<br />');
          botMessage = botMessage
            // .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            // .replace(/\#\#(.#?)\#\#/g, '<strong>$1</strong>')
            // .replace(/\#\#\#(.#?)\#\#\#/g, '<strong>$1</strong>')
            // .replace(/\n/g, '<br />')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // Bold text with **
            .replace(/##([^#]+)##/g, '<strong>$1</strong>')   // Bold text with ##
            .replace(/###([^#]+)###/g, '<strong>$1</strong><br />')
            .replace(/#([^#]+)#/g, '<strong>$1</strong>')
            .replace(/\n/g, '<br />');
          // .replace(/\b([IVXLCDM]+)\b/g, '<strong>$1</strong>');
          console.log('botMessage--->', botMessage)
          setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: botMessage }]);
          console.log('Message--->', messages)
        } else {
          throw new Error('Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: 'Something went wrong, try again later!' }]);
      } finally {
        setSendingMessage(false);
        inputRef.current.focus();
      }
    }
  };

  // Function to scroll to the bottom of messages
  const scrollToBottom = () => {
    if (messages.length > 1 || (messages.length === 1 && welcomeMessageShown)) {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }
  };

  // Effect to scroll to bottom when messages change
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Effect to initialize welcome message when component mounts
  useEffect(() => {
    const welcomeMessage = `
      Hello! I'm Ayesha,
      <br /><br />As a valued customer, we are eager to inform you about a special credit offer exclusively for you. We are proposing an opportunity to enhance your purchasing power and enjoy a more flexible shopping experience.<br />Here are the details of your special credit offer:<br /><br /><b style="font-size : 16px ">•</b> Credit Limit: Up to 4 Multiple of your salary
      <br /><b style="font-size : 16px ">•</b> NO Interest % on BT and EPP<br /><b style="font-size : 16px ">•</b> Airport lounge access for you through Lounge Key<br /><b style="font-size : 16px ">•</b> Access to a digital concierge channel in addition to telephone and email service<br /><b style="font-size : 16px ">•</b> 50% off on movie tickets at Novo, Reel & VOX cinemas<br /><b style="font-size : 16px ">•</b> Complimentary valet parking service across 30 locations<br /><b style="font-size : 16px ">•</b> Spend AED 500 for an entry into the lucky draw of AED 100,000 every week!<br /><b style="font-size : 16px ">•</b> No annual fees on Credit cards<br /><br />
      <p>We are offering the following credit cards:</p>
      <div class="softButtons" style="text-align: center;">
        <button class="softbutton" style="background-color: green; color: white; padding: 8px 12px; margin: 5px; border: none; border-radius: 4px;" onclick="window.showOffer1()">Card 1</button>
        <button class="softbutton" style="background-color: blue; color: white; padding: 8px 12px; margin: 5px; border: none; border-radius: 4px;" onclick="window.showOffer2()">Card 2</button>
        <button class="softbutton" style="background-color: purple; color: white; padding: 8px 12px; margin: 5px; border: none; border-radius: 4px;" onclick="window.showOffer3()">Card 3</button>
      </div>
      <p>Simply click the buttons to explore your options and let me know if you would like to take advantage of this offer.</p>
      <p>If you have any questions or need further information, feel free to ask!</p>
      <div class="customdiv"><img src="/cbdoffer.png" alt="Image description" style="max-width: 100%; height: auto;"></div>
    `;

    setMessages([{ sender: 'bot', text: welcomeMessage }]);
    setWelcomeMessageShown(true);

    // Assign the functions to window object
    window.showOffer1 = () => showOffer1();
    window.showOffer2 = () => showOffer2();
    window.showOffer3 = () => showOffer3();
  }, []);

  const handleKeyDown = (event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      handleSend();
    }
  };

  const showOffer1 = () => {
    setDialogContent({ 
      message: "You have selected Offer 1. This offer includes ...",
      imageUrl: "/path/to/offer1image.jpg", 
      link: "https://example.com/offer1"
    });
    setOpen(true);
  };

  const showOffer2 = () => {
    setDialogContent({ 
      message: "You have selected Offer 2. This offer includes ...",
      imageUrl: "/path/to/offer2image.jpg", 
      link: "https://example.com/offer2"
    });
    setOpen(true);
  };

  const showOffer3 = () => {
    setDialogContent({ 
      message: "You have selected Offer 3. This offer includes ...",
      imageUrl: "/path/to/offer3image.jpg", 
      link: "https://example.com/offer3"
    });
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div className="chat-app">
      <div className="chat-container">
        <div className="messages">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              dangerouslySetInnerHTML={{ __html: message.text }}
            />
          ))}
          <div ref={messagesEndRef} />
        </div>
        <div className="input-container">
          <input
            type="text"
            placeholder="Type your message..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            ref={inputRef}
          />
          <button
            className="send-button"
            onClick={handleSend}
            disabled={sendingMessage}
          >
            <SendIcon />
          </button>
        </div>
      </div>

      <Dialog
        fullScreen
        open={open}
        onClose={handleClose}
        TransitionComponent={Transition}
      >
        <AppBar sx={{ position: 'relative' }}>
          <Toolbar>
            <IconButton
              edge="start"
              color="inherit"
              onClick={handleClose}
              aria-label="close"
            >
              <CloseIcon />
            </IconButton>
            <Typography sx={{ ml: 2, flex: 1 }} variant="h6" component="div">
              Offer Details
            </Typography>
            <Button autoFocus color="inherit" onClick={() => window.open(dialogContent.link, "_blank")}>
              Learn More
            </Button>
          </Toolbar>
        </AppBar>
        <List>
          <ListItemButton>
            <ListItemText primary={dialogContent.message} />
          </ListItemButton>
          <Divider />
          <ListItemButton>
            <ListItemText primary="Image" />
            <img src={dialogContent.imageUrl} alt="Offer Image" style={{ maxWidth: '100%', height: 'auto' }} />
          </ListItemButton>
        </List>
      </Dialog>
    </div>
  );
};

export default ChatAppAlert;
